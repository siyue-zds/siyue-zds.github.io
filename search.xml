<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>遗传算法的生物学基础</title>
    <url>/2022/04/04/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%9A%84%E7%94%9F%E7%89%A9%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>生物在自然界中的生存繁衍，显示出了其对自然环境的优异自适应能力。受其启发，人们致力于对生物各种生存特性的机理研究和行为模拟，为人工自适应系统的设计和开发提供了广阔的前景。<strong>遗传算法（Genetic Algorithms，简称GAs）</strong> 就是这种生物行为的计算机模拟中令人瞩目的重要成果。基于对生物遗传和进化过程的计算机模拟，遗传算法使得各种人工系统具有优良的自适应能力和优化能力。遗传算法所借鉴的生物学基础就是生物的遗传和进化。<br><span id="more"></span></p>
<div align=center>
<img src="DNA.jpg" width = 80% height="80%">
</div>

<h1 id="1-遗传与变异"><a href="#1-遗传与变异" class="headerlink" title="1. 遗传与变异"></a>1. 遗传与变异</h1><p><strong>遗传(Heredity)</strong> ：亲代表达相应性状的基因通过无性繁殖或有性繁殖传递给后代，从而使后代获得其父母遗传信息的现象。</p>
<p><strong>变异(Variation)</strong> ：在生物体上泛指生物种与个体之间的各种差异，包括形态、生理、生化以及行为、习性等各方面的歧异，变异是生物进化和人类育种的根源，包括可遗传的和不可遗传的变异。</p>
<p>构成生物的基本结构和功能单位是<strong>细胞(Cell)</strong> 。细胞中含有的一种微小的丝状化合物称为<strong>染色体(Chromosome)</strong> ，生物的所有遗传信息都包含在这个复杂而又微小的染色体中。遗传信息是由<strong>基因(Gene)</strong> 组成的,生物的各种性状由其相应的基因所控制，基因是遗传的基本单位。细胞通过分裂具有自我复制的能力，在细胞分裂的过程中，其遗传基因也同时被复制到下一代，从而其性状也被下一代所继承。</p>
<p>经过生物学家的研究，现在人们已经明白控制并决定生物遗传性状的染色体主要是由一种叫做<strong>脱氧核糖核酸(Deoxyribornuclei Acid，简称DNA)</strong> 的物质所构成，除此之外、染色体中还含有很多蛋白质。DNA在染色体中有规则地排列着，它是个大分子的有机聚合物，其基本结构单位是核苷酸。每个核苷酸由四种称为碱基的环状有机化合物中的一种（分子戊糖和磷酸分子）所组成。许多核苷酸通过磷酸二酯键相结合形成一个长长的链状结构，两个链状结构再通过碱基间的氢键有规律地扭合在一起，相互卷曲起来形成一种双螺旋结构。另外，低等生物中还含有一种叫做<strong>核糖核酸(Ribonucleic Acid，简称RNA)</strong> 的物质，它的作用和结构与DNA类似。基因就是DNA或RNA长链结构中占有一定位置的基本遗传单位。生物的基因数量根据物种的不同也多少不一，小的病毒只含有几个基因，而高等动植物的基因却以数万计。DNA中，遗传信息在一条长链上按一定的模式排列，亦即进行了遗传编码。一个基因或多个基因决定组成蛋出质的20种氨基酸的组成比例及排列顺序。遗传基因在染色体中所占据的位置称为基因座(Locus)，同一基因座可能有的全部基因称为等位基因(Allele)。某种生物所特有的基因及其构成形式称为该生物的<strong>基因型(Genotype)</strong> ,而该生物在环境中呈现出的相应的性状称为该生物的<strong>表现型(Phcnotypc)</strong> 。一个细胞核中所有染色体所携带的遗传信息的全体称为一个<strong>基因组( Genome)</strong> 。</p>
<p>细胞在分裂时，遗传物质DNA道过<strong>复制(Reproxduction)</strong> 而转移到新产生的细胞中，新细胞就继承了旧细胞的基因。有性生殖生物在繁殖下一代时，两个同源染色体之间通过<strong>交叉( Crossover)</strong> 而重组，亦即在两个染色体的某一相同位置处DNA被切断，其前后两串分别交叉组合而形成两个新的染色体。另外，在进行细胞复制时，虽然概率很小，但也有可能产生某些复制差错，从而使DNA发生某种变异(Mutation),产生出新的染色体。这些新的染色体表现出新的性状。如此这般，遗传基因或染色体在遗传的过程中由于各种各样的原因而发生变化。</p>
<h1 id="2-进化"><a href="#2-进化" class="headerlink" title="2. 进化"></a>2. 进化</h1><p>生物在其延续生存的过程中，逐渐适应于其生存环境，使得其品质不断得到改良，这种生命现象称为<strong>进化(Evolution)</strong> 。生物的进化是以集团的形式共同进行的，这样的一个团体称为<strong>群体( Population)</strong> ，组成群体的单个生物称为<strong>个体(Individual)</strong> ，每一个个体对其生存环境都有不同的适应能力，这种适应能力称为个体的<strong>适应度(Fitness)</strong> 。达尔文(Darwin)的<strong>自然选择学说(Natural Selection)</strong> 构成了现代进化论的主体。自然选择学说认为，通过不同生物间的交配以及其他一些原因，生物的基因有可能发生变异而形成一种新的生物基因，这部分变异了的基内也将遗传到下一代。虽然这种变化的概率是可以预测的，但具体哪一个个体发生变化却是偶然的。这种新的基因依据其与环境的适应程度决定其增殖能力，有利于生存环境的基因逐渐增多，而不利于生存环境的基因逐渐减少。通过这种自然的选择，物种将逐渐地向适应于生存环境的方向进化，从而产生出优良的物种。</p>
<h1 id="3-遗传与进化的系统观"><a href="#3-遗传与进化的系统观" class="headerlink" title="3. 遗传与进化的系统观"></a>3. 遗传与进化的系统观</h1><p>虽然人们还未完全揭开遗传与进化的奥秘，既没有完全掌握其机制,也不完全清楚染色体编码和译码过程的细节更,不完全了解其控制方式，但遗传与进化的以下几个特点却为人们所共识:</p>
<ol>
<li>生物的所有遗传信息都包含在其染色体中，染色体决定生物的性状。</li>
<li>染色体是由基因及其有规律的排列所构成的，遗传和进化过隆发生在染色体上。</li>
<li>生物的繁殖过程是由其基因的复制过程来完成的。</li>
<li>通过同源染色体之间的交叉或染色体的变异会产生新的物种，使生物呈现新的性状。</li>
<li>对环境适应性好的基因或染色体经常比适应性差的基因或染色体有更多的机会遗传到下一代。</li>
</ol>
]]></content>
      <categories>
        <category>遗传算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Preface</title>
    <url>/2022/03/16/Preface/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1>]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>前言</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法简介</title>
    <url>/2022/04/06/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>遗传算法是模拟生物在自然环境中的遗传和进化过程而形成的一种自适应全局优化概率搜索算法。它最早由美国密歇根大学的 Holland 教授提出，起源于60年代对自然和人工自适应系统的研究。70年代 De Jong 基于遗传算法的思想在计算机上进行了大量的纯数值函数优化计算实验。在一系列研究工作的基础上，80年代由 Goldberg 进行归纳总结，形成了遗传算法的基本框架。<br><span id="more"></span></p>
<h1 id="1-遗传算法概要"><a href="#1-遗传算法概要" class="headerlink" title="1. 遗传算法概要"></a>1. 遗传算法概要</h1><p>对于一个求函数最大值的优化问题（求函数最小值也类同），一般可描述为下述数学规划模型:</p>
<p>$<br>\begin{cases}\max &amp; f(X) \\ \text { s.t. } &amp; X \in R \\ &amp; R \subseteq U\end{cases}<br>$</p>
<p>式中， $X=\left[\begin{array}{llll}x_{1}, &amp; x_{2}, &amp; \cdots, &amp; x_{n}\end{array}\right]^{T}$ 为决策变量， $U$ 是基本空间， $R$ 是 $U$ 的一个子集。满足约束条件的解 $X$ 称为可行解,集合 $R$ 表示由所有满足约束条件的解所组成的一个集含，叫做可行解集合。三者之间的关系是 $X \in R \in U$。</p>
<p>对于上述最优化问题，目标函数和约束条件种类繁多，有的是线性的，有的是非线性的;有的是连续的，有的是离散的。随着研究的深入，人们逐渐认识到在很多复杂情况下要想完全精确地求出其最优解既不可能，也不现实，因而求出其 <strong>近似最优解或满意解</strong> 是人们的主要着眼点之一。总的来说，求最优解或近似最优解的方法主要有三种:枚举法、启发式算法和搜索算法。</p>
<ol>
<li><p><strong>枚举法</strong> : 枚举出可行解集合内的所有可行解，以求出精确最优解。对于连续函数，该方法要求先对其进行离散化处理，这样就有可能产生离散误差而永远达不到最优解。另外，当枚举空间比较大时，该方法的求解效率比较低，有时甚至在目前最先进的计算工具上都无法求解。</p>
</li>
<li><p><strong>启发式算法</strong> : 寻求一种能产生可行解的启发式规则，以找到-个最优解或近似最优解。该方法的求解效率虽然比较高，但对每一个需要求解的问题都必须找出其特有的启发式规则，这个启发式规则无通用性，不适合于其他问题。</p>
</li>
<li><p><strong>搜索算法</strong> : 寻求一种搜索算法，该算法在可行解集合的一个子集内进行搜索操作，以找到问题的最优解或近似最优解。该方法虽然保证不了一定能够得到问题的最优解，但若适当地利用一些启发知识，就可在近似解的质量和求解效率上达到一种较好的平衡。</p>
</li>
</ol>
<p>随着问题种类的不同，以及问题规模的扩大，要寻求到一种能以有限的代价来解决上述最优化问题的通用方法仍是一个难题。而遗传算法却为我们解决这类问题提供了一个有效的途径和通用框架，开创了一种新的全局优化搜索算法。</p>
<p>遗传算法中，将 $n$ 维决策向量 $X=\left[\begin{array}{llll}x_{1}, &amp; x_{2}, &amp; \cdots, &amp; x_{n}\end{array}\right]^{T}$ 下用 $n$ 个记号 $X_{i}(i=1,2, \cdots, n)$ 所组成的符号串 $X$ 来表示:</p>
<p>$<br>X=X_{1} X_{2} \cdots X_{n} \Rightarrow X=\left[\begin{array}{llll}<br>x_{1}, &amp; x_{2}, &amp; \cdots, &amp; x_{n}<br>\end{array}\right]^{T}<br>$</p>
<p>把每一个 $X_{i}$ 看作一个遗传基因，它的所有可能取值称为等位基因，这样，$X$就可看做是由 $n$ 个遗传基因所组成的一个染色体。</p>
<p>一般情况下，染色体的长度 $n$ 是固定的，但对一些问题 $n$ 也可以是变化的。根据不同的情况，等位基因可以是一组整数，也可以是某一范围内的实数值，或者是纯粹的一个记号。最简单的等位基因是由 0 和 1 两个整数组成的，相应的染色体就可表示为一个二进制符号串。这种编码所形成的排列形式 $X$ 是个体的基因型,与它对应的 $X$ 值是个体的表现型。通常个体的表现型和其基对型是一一对应的，但有时也允许基因型和表现型是多对一的关系。染色体 $X$ 也称为个体 $X$ ，对于每一个个体 $X$ ，要按照一定的规则确定出其适应度。个体的适应度与其对应的个体表现型 $X$ 的目标函数值相关联， $X$ 越接近于目标函数的最优点，其适应度越大；反之，其适应度越小。</p>
<p>遗传算法中，决策变量 $X$ 组成了问题的解空间。对问题最优解的搜索是通过对染色体 $X$ 的搜索过程来进行的，从而由所有的染色体￥就组成了问题的搜索空间。</p>
<p>生物的进化是以集团为主体的。与此相对应，遗传算法的运算对象是由 $M$ 个个体所组成的集合，称为群体。与生物一代一代的自然进化过程相类似，遗传算法的运算过程也是一个反复迭代过程：第 $t$ 代群体记做 $P(t)$ ，经过一代遗传和进化后，得到第 $t+1$ 代群体，它们也是由多个个体组成的集合，记做 $P(t+1)$ 。这个群体不断地经过遗传和进化操作，并且每次都按照优胜劣汰的规则将适应度较高的个体更多地遗传到下一代，这样最终在群体中将会得到一个优良的个体 $X$ ，它所对应的表现型 $X$ 将达到或接近于河题的最优解 $X^{*}$ 。</p>
<p>生物的进化过程主要是通过染色体之间的交叉和染色体的变异完成的。与此相对应，遗传算法中最优解的搜索过程也模仿生物的进化过程，使用所谓的遗传算子（genetic opcralors）作用」群体 $P(t)$ 中，进行下述遗传操作，从而得到新一代群体 $P(t+1)$ 。</p>
<ul>
<li><strong>选择（selection）</strong> :根据各个个体的适应度，按照一定的规则或方法，从第 $t$ 代群体 $P(t)$ 中选择出一些优良的个体遗传到下一代群体 $P(t+1)$ 中。</li>
<li><strong>交叉（crossover）</strong> :将群体 $P(t)$ 内的各个个体随机搭配成对，对每一对个体，以某个概率（称为交叉概率，crossoverrate）交换它们之间的部分染色体。</li>
<li><strong>变异（mutation）</strong> :对群体 $P(t)$ 中的每一个个体，以某一概率（称为变异概率，mutation rate）改变某一个或某一些基因座上的基因值为其他的等位基因。</li>
</ul>
<h1 id="2-遗传算法的一般步骤"><a href="#2-遗传算法的一般步骤" class="headerlink" title="2. 遗传算法的一般步骤"></a>2. 遗传算法的一般步骤</h1><div align=center>
<img src="GA_flowchart.jpg" width = 50% height="50%">
</div>

<p>遗传算法的主要运算步骤过程如下：</p>
<ol>
<li>初始化。设置进化代数计数器 $t \leftarrow 0$ ;设置最大进化代数;随机生成M个个体作为初始群体 $P(0)$ 。</li>
<li>个体评价。计算群体 $P(t)$ 中各个个体的适应度。</li>
<li>选择运算。将选择算子作用于群体。</li>
<li>交叉运算。将交叉算子作用于群体。</li>
<li>变异运算。将变异算子作用于群体。群体 $P(t)$ 经过选择、交叉、变异运算之后得到下一代群体 $P(t+1)$ 。</li>
<li>终止条件判断。<ul>
<li>若上 $t \leqslant T$ ，则: $t \leftarrow t+1$， 转到步骤 2；</li>
<li>若 $t &gt; T$ ，则以进化过程中所得到的具有最大适应度的个体作为最优解输出，终止计算。</li>
</ul>
</li>
</ol>
<h1 id="3-遗传算法的特点"><a href="#3-遗传算法的特点" class="headerlink" title="3. 遗传算法的特点"></a>3. 遗传算法的特点</h1><p>遗传算法是一类可用于复杂系统优化计算的鲁棒搜索算法，与其他一些优化算法相比、它主要有下述几个特点：</p>
<ol>
<li><p>遗传算法 <strong>以决策变量的编码作为运算对象</strong> 。传统的优化算法往往直接利用决策变址的实际值本身来进行优化计算，但遗传算法不是直接以决策变量的值，而是以决策变量的某种形式的编码为运算对象。这种对决策变量的编码处理方式，使得我们在优化计算过程中可以借鉴生物学中染色体和基因等概念，可以模仿自然界中生物的遗传和进化等机理，也使得我们可以方便地应用遗传操作算子。特别是对些无数值概念或很难有数值概念，而只有代码概念的优化问题，编码处理方式更显示出了其独特的优越性。</p>
</li>
<li><p>遗传算法 <strong>直接以目标函数值作为搜索信息</strong> 。传统的优化算法不仅需要利用目标函数值，而且往往需要目标函数的导数值等其他一些辅助信息才能确定搜索方向。而遗传算法仅使用由目标函数值变换来的适应度函数值，就可确定进一步的搜索方向和搜索范围，无需目标函数的导数值等其他些辅助信息。这个特性对很多目标函数是无法或很难求导数的函数，或导数不存在的函数的优化问题，以及组合优化问题等，应用遗传算法时就显得比较方便，因为它避开了函数求导这个障碍。再者，直接利用目标函数值或个体适应度，也可使得我们可以把搜索范围集中到适应度较高的部分搜索空间中，从而提高了搜索效率。</p>
</li>
<li><p>遗传算法 <strong>同时使用多个搜索点的搜索信息</strong> 。传统的优化算法往往是从解空间中的一个初始点开始最优解的迭代搜索过程。单个搜索点所提供的搜索信息毕竟不多，所以搜索效率不高，有时甚至使搜索过程陷于局部最优解而停滞不前。遗传算法从由很多个体所组成的一个初始群体开始最优解的搜索过程，而不是从一个单一的个体开始搜索。对这个群体所进行的选择、交叉、变异等运算，产生出的乃是新一代的群体，在这之中包括了很多群体信息。这些信息可以避免搜索一些不必搜索的点，所以实际上相当于搜索了更多的点，这是遗传算法所特有的一种隐含并行性。</p>
</li>
<li><p>遗传算法使用 <strong>概率搜索技术</strong> 。很多传统的优化算法往往使用的是确定性的搜索方法，一个搜索点到另一个搜索点的转移有确定的转移方法和转移关系，这种确定性往往也有可能使得搜索永远达不到最优点，因而也限制了算法的应用范围。而遗传算法属于一种自适应概率搜索技术，其选择、交叉、变异等运算都是以一种概率的方式来进行的，从面增加了其搜索过程的灵活性。虽然这种概率特性也会使群体中产生一些适应度不高的个体，但随着进化过程的进行，新的群体中总会更多地产生出许多优良的个体，实践和理论都已证明了在一定条件下遗传算法总是以概率 1 收敛于问题的最优解。当然，交叉概率和变异概率等参数也会影响算法的搜索效果和搜索效率，所以如何选择遗传算法的参数在其应用中是一个比较重要的问题。而另一方面，与其他一些算法相比，遗传算法的鲁棒性又会使得参数对其搜索效果的影响会尽可能地低。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>遗传算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基本遗传算法</title>
    <url>/2022/04/07/%E5%9F%BA%E6%9C%AC%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>不同的编码方法和不同的遗传算子构成了各种不同的遗传算法，但这些遗传算法都有共同的特点：即通过对生物遗传和进化过程中选择、交叉、变异机理的模仿，来完成对问题最优解的自适应搜索过程。基于这个共同特点，Goldberg 总结出了一种统一的最基本的遗传算法——基本遗传算法（Simple Ge-netic Algorithms，简称SGA）。</p>
<p>基本遗传算法只使用选择算子、交叉算子和变异算子这三种基本遗传算子，其遗传进化操作过程简单，容易理解，是其他一些遗传算法的雏形和基础，它不仅给各种遗传算法提供了一个基本框架，同时也具有一定的应用价值。<br><span id="more"></span></p>
<h1 id="1-基本遗传算法的构成要素"><a href="#1-基本遗传算法的构成要素" class="headerlink" title="1. 基本遗传算法的构成要素"></a>1. 基本遗传算法的构成要素</h1><h2 id="1-1-染色体编码方法"><a href="#1-1-染色体编码方法" class="headerlink" title="1.1 染色体编码方法"></a>1.1 染色体编码方法</h2><p>基本遗传算法使用固定长度的二进制符号串来表示群体中的个体，其等位基因是由二值符号集 $[ 0, 1 ]$ 所组成的。初始群体中各个个体的基因值可用均匀分布的随机数来生成。如:<br>$X=100111001000101101$<br>就可表示一个个体，该个体的染色体长度是 $n=18$ 。</p>
<h2 id="1-2-个体适应度评价"><a href="#1-2-个体适应度评价" class="headerlink" title="1.2 个体适应度评价"></a>1.2 个体适应度评价</h2><p>基本遗传算法按与个体适应度成正比的概率来决定当前群体中每个个体遗传到下一代群体中的机会多少。为正确计算这个概率，要求所有个体的适应度必须为正数或零。根据不同种类的问题，必须预先确定好由目标函数值到个体适应度之间的转换规则，特别是要预先确定好当目标函数值为负数时的处理方法。</p>
<h2 id="1-3-遗传算子"><a href="#1-3-遗传算子" class="headerlink" title="1.3 遗传算子"></a>1.3 遗传算子</h2><p>基本遗传算法使用下述三种遗传算子:</p>
<ul>
<li>选择运算使用比例选择算子</li>
<li>交叉运算使用单点交叉算子</li>
<li>变异运算使用基本位变异算子或均匀变异算子</li>
</ul>
<h2 id="1-4-基本遗传算法的运行参数"><a href="#1-4-基本遗传算法的运行参数" class="headerlink" title="1.4 基本遗传算法的运行参数"></a>1.4 基本遗传算法的运行参数</h2><p>基本遗传算法有下述 4 个运行参数需要提前设定：</p>
<ul>
<li>$M$ : 群体大小，即群体中所含个体的数量，一般取为 $100 \sim 500$ 。</li>
<li>$T$ : 遗传运算的终止进化代数，一般取为 $100 \sim 500$ 。</li>
<li>$p_{c}$ : 交叉概率，一般取为 $0.4 \sim 0.99$ 。</li>
<li>$p_{m}$ : 变异概率，一般取为 $0.0001 \sim 0.1$ 。</li>
</ul>
<p>需要说明的是，4个运行参数对遗传算法的求解结果和求解效率都有一定的影响，但自前尚无合理选择它们的理论依据。在遗传算法的实际应用中，往往需要经过多次试算后才能确定出这些参数合理的取值大小或取值范围。</p>
<h1 id="2-基本遗传算法的实现"><a href="#2-基本遗传算法的实现" class="headerlink" title="2. 基本遗传算法的实现"></a>2. 基本遗传算法的实现</h1><h2 id="2-1-个体适应度评估"><a href="#2-1-个体适应度评估" class="headerlink" title="2.1 个体适应度评估"></a>2.1 个体适应度评估</h2><p>在遗传算法中，以个体适应度的大小来确定该个体被遗传到下一代群体中的概率。个体的适应度越大，该个体被遗传到下一代的概率也越大；反之，个体的适应度越小，该个体被遗传到下一代的概率也越小。基本遗传算法使用比例选择算子来确定群体中各个个体遗传到下一代群体中的数量。为正确计算不同情况下各个个体的遗传概率，要求所有个体的适应度必须为正数或零，不能是负数。</p>
<p>对于求目标函数最小值的优化问题,理论上只需简单地对其增加一个负号就可将其转化为求自标函数最大值的优化问题，即：<br>$\min f(X)=\max (-f(X))$<br>当优化目标是求函数最大值,并且目标函数总取正值时，可以直接设定个体的适应度 $F(X)$ 就等于相应的目标函数值 $f(X)$ ，即:<br>$F(X)=f(X)$<br>但实际优化问题中的目标函数值有正也有负，优化目标有求函数最大值，也有求函数最小值，显然上面两式保证不了所有情况下个体的适应度都是非负数这个要求。所以必须寻求出一种通用且有效的由目标函数值到个体适应度之间的转换关系，以保证个体适应度总取非负值。</p>
<p>为满足适应度取非负值的要求，基本遗传算法一般采用下面两种方法之一将目标函数值 $f(X)$ 变换为个体的适应度 $F(X)$ 。</p>
<p><strong>方法一</strong>：对于求目标函数最大值的优化问题，变换方法为：<br>$F(X)= \begin{cases}f(X)+C_{\min }, &amp; \text { if } f(X)+C_{\min }&gt;0 \\ 0, &amp; \text { if } f(X)+C_{\min } \leqslant 0\end{cases}$<br>式中， $C_{min}$ 为一个适当地相对比较小的数，它可用下面几种方法之一来选取:</p>
<ul>
<li>预先指定的个较小的数。</li>
<li>进化到当前代为止的最小目标函数值。</li>
<li>当前代或最近几代群体中的最小目标函数值。</li>
</ul>
<p><strong>方法二</strong>：对于求目标函数最小值的优化问题，变换方法为：<br>$F(X)= \begin{cases}C_{\max }-f(X), &amp; \text { if } f(X)&lt;C_{\max } \\ 0, &amp; \text { if } f(X) \geqslant C_{\max }\end{cases}$<br>式中， $C_{min}$ 为一个适当地相对比较大的数，它可用下面几种方法之来选取：</p>
<ul>
<li>预先指定的一个较大的数。</li>
<li>进化到当前代为止的最大目标函数值。</li>
<li>当前代或最近几代群体中的最大目标函数值。</li>
</ul>
<h2 id="2-2-比例选择算子"><a href="#2-2-比例选择算子" class="headerlink" title="2.2 比例选择算子"></a>2.2 比例选择算子</h2><p>选择算子或复制算子的作用是从当前代群体中选择出一些比较优良的个体、并将其复制到下一代群体中。最常用和最基本的选择算子是比例选择算子。所谓比例选择算子，是指个体被选中并遗传到下一代群体中的概率与该个体的适应度大小成正比。</p>
<p>比例选择实际上是一种有退还随机选择，也叫做赌盘（Roulette Wheel）选择，因为这种选择方式与赌博中的赌盘操作原理颇为相似。</p>
<center>
    <img src="roulette_ wheel.png" width="50%" height="50%"/>
</center>

<p>整个赌盘被分为大小不同的一些扇面，分别对应着价值各不相同的一些赌博物品。当旋转着的赌盘自然停下来时，其指针所指扇面上的物品就归赌博者所有。虽然赌盘的指针具体停止在哪一个扇面是无法预测的，但指针指向各个扇面的概率却是可以估计的，它与各个扇面的圆心角大小成正比：圆心角越大，停在该扇面的可能性也越大；圆心角越小，停在该扇面的可能性也越小。与此类似，在遗传算法中，整个群体被各个个体所分割，各个个体的适应度在全部个体的适应度之和中所占比例也大小不一，这个比例值瓜分了整个赌盘盘面，它们也决定了各个个体被遗传到下一代群体中的概率。</p>
<p>比例选择算子的具体执行过程是:</p>
<ol>
<li>先计算出群体中所有个体的适应度的总和。</li>
<li>其次计算出每个个体的相对适应度的大小，它即为各个个体被遗传到下一代群体中的概率。</li>
<li>最后再使用模拟赌盘操作（即 0 到 1 之间的随机数）来确定各个个体被选中的次数。</li>
</ol>
<h2 id="2-3-单点交叉算子"><a href="#2-3-单点交叉算子" class="headerlink" title="2.3 单点交叉算子"></a>2.3 单点交叉算子</h2><p>单点交叉算子是最常用和最基本的交叉操作算子。单点交叉算子的具体执行过程如下：</p>
<ol>
<li>对群体中的个体进行两两随机配对。若群体大小为 $M$ ，则共有 $\lfloor M / 2\rfloor$ 对相互配对的个体组。其中 $\lfloor x \rfloor$ 表示不大于 $x$ 的最大的整数。</li>
<li>对每一对相互配对的个体，随机设置某一基因座之后的位置为交叉点。若染色体的长度为 $n$ ，则共有 $(n-1)$ 个可能的交叉点位置。</li>
<li>对每一对相互配对的个体，依设定的交叉概率 $p_{c}$ 在其交叉点处相互交换两个个体的部分染色体，从而产生出两个新的个体。</li>
</ol>
<center>
    <img src="crossover_example.png" width="80%" height="80%"/>
</center>

<h2 id="2-4-基本位变异算子"><a href="#2-4-基本位变异算子" class="headerlink" title="2.4 基本位变异算子"></a>2.4 基本位变异算子</h2><p>基本位变异算子是最简单和最基本的变异操作算子。对于基本遗传算法中用二进制编码符号串所表示的个体，若需要进行变异操作的某一基因座上的原有基因值为 $0$ ，则变异操作将该基因值变为 $1$ ；反之，若原有基因值为 $1$ ，则变异操作作将其变为 $0$ 。</p>
<p>基本位变异算子的具体执行过程是:</p>
<ol>
<li>对个体的每一个基因座，依变异概率 $p_{m}$ 指定其为变异点。</li>
<li>对每一个指定的变异点，对其基因值做取反运算或用其他等位基因值来代替，从而产生出一个新的个体。</li>
</ol>
<center>
    <img src="mutation_example.png" width="80%" height="80%"/>
</center>

<h1 id="3-遗传算法应用步骤"><a href="#3-遗传算法应用步骤" class="headerlink" title="3. 遗传算法应用步骤"></a>3. 遗传算法应用步骤</h1><p>基本遗传算法是一个迭代过程，它模仿生物在自然环境中的遗传和进化机理，反复将选择算子、交叉算子、变异算子作用于群体，最终可得到问题的最优解或近似最优解。虽然算法的思想比较单纯，结构也比较简单，但它却也具有一定的实用价值，能够解决一些复杂系统的优化计算问题。</p>
<p>遗传算法提供了一种求解复杂系统优化问题的通用框架，它不依赖于问题的领域和种类。对一个需要进行优化计算的实际应用问题，一般可按下述步骤来构造求解该问题的遗传算法：</p>
<ol>
<li>确定决策变量及其各种约束条件，即确定出个体的表现型和问题的解空间。</li>
<li>建立优化模型，即确定出目标函数的类型（是求目标函数的最大值还是求目标函数的最小值?）及其数学描述形式或量化方法。</li>
<li>确定表示可行解的染色体编码方法，也即确定出个体的基因型 $X$ 及遗传算法的搜索空间。</li>
<li>确定解码方法，即确定出由个体基因型 $X$ 到个体表现型的对应关系或转换方法。</li>
<li>确定个体适应度的量化评价方法，即确定出由目标函数值 $f(X)$ 到个体适应度 $F(X)$ 的转换规则。</li>
<li>设计遗传算子，即确定出选择运算、交叉运算、变异运算等遗传算子的具体操作方法。</li>
<li>确定遗传算法的有关运行参数，即确定出遗传算法的 $M$ 、 $T$ 、$p_{c}$ 、 $p_{m}$ 等参数。</li>
</ol>
<p>由上述构造步骤可以看出，可行解的编码方法、遗传算子的设计是构造遗传算法时需要考虑的两个主要问题，也是设计遗传算法时的两个关键步骤。对不同的优化问题需要使用不同的编码方法和不同操作的遗传算子，它们与所求解的具体问题密切相关，因而对所求解问题的理解程度是遗传算法应用成功与否的关键。</p>
]]></content>
      <categories>
        <category>遗传算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
      </tags>
  </entry>
</search>
